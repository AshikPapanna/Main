{"version":3,"sources":["components/profile/profile.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,wCAAkD;AAClD,wCAAwE;AACxE,gCAAqC;AACrC,iCAA+B;AAC/B,mCAAiC;AAKjC,gEAAmD;AACnD,4CAAyC;AAMzC,IAAa,cAAc,GAA3B;IACI,YAAoB,IAAU,EAAmB,QAAY,EAAU,QAAiB;QAApE,SAAI,GAAJ,IAAI,CAAM;QAAyC,aAAQ,GAAR,QAAQ,CAAS;IAAG,CAAC;IAE5F,WAAW,CAAC,OAAc;QAEtB,EAAE,CAAA,CAAC,OAAO,CAAC,CACP,CAAC;YACG,YAAY,CAAC,OAAO,CAAC,MAAM,EAAC,IAAI,CAAC,SAAS,CAAC,EAAC,KAAK,EAAC,OAAO,EAAC,CAAC,CAAC,CAAA;YAC5D,IAAI,CAAC,UAAU,GAAC,OAAO,CAAC;QAC5B,CAAC;QACD,IAAI,CAAA,CAAC;YACD,IAAI,CAAC,UAAU,GAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC;QACnE,CAAC;QACL,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,eAAe,EAAE,MAAM,GAAE,IAAI,CAAC,UAAU,EAAC,CAAC,CAAC;QACvE,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC;QACzD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,EAAC,OAAO,CAAC;aACjD,GAAG,CAAC,CAAC,GAAY,EAAC,EAAE,GAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAA,GAAG,IAAI,GAAG,CAAC,IAAI,EAAE,CAAA,CAAA,CAAC,CAAC;aACxD,KAAK,CAAC,CAAC,KAAS,EAAC,EAAE,CAAA,eAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAA;IACjD,CAAC;IACD,kBAAkB;QAChB,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,GAAC,IAAI,GAAC,QAAQ,CAAC,QAAQ,GAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAC,QAAQ,CAAC,IAAI,CAAA,CAAC,CAAC,EAAE,CAAC,GAAC,kBAAkB,EAAE,IAAI,qBAAc,CAAC,EAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAY,EAAC,EAAE,CAAA,GAAG,CAAC,IAAI,EAAE,CAAC,CAAA;IACpL,CAAC;CACJ,CAAA;AAtBY,cAAc;IAF1B,iBAAU,EACV;IAEmC,WAAA,aAAM,CAAC,2BAAQ,CAAC,CAAA;qCAAtB,WAAI,UAAkD,iBAAQ;GAD/E,cAAc,CAsB1B;AAtBY,wCAAc","file":"profile.service.js","sourcesContent":["import { Injectable,Inject } from '@angular/core';\r\nimport { Http, Headers, RequestOptions, Response } from '@angular/http';\r\nimport { Observable } from 'rxjs/Rx';\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/catch';\r\n\r\n \r\nimport { LoginService } from '../login/login.service';\r\nimport { Profile } from '../../../models/profile';\r\nimport {DOCUMENT} from '@angular/platform-browser';\r\nimport {Location} from '@angular/common';\r\n\r\n\r\n\r\n@Injectable( \r\n)\r\nexport class ProfileService {\r\n    constructor(private http: Http,@Inject(DOCUMENT) document:any ,private location:Location) {}\r\n     localtoken:string;\r\n    getprofiles(tokenId:string): Observable<Profile[]> {      \r\n        \r\n        if(tokenId)\r\n            {\r\n                localStorage.setItem('user',JSON.stringify({token:tokenId}))\r\n                this.localtoken=tokenId;\r\n            }\r\n            else{\r\n                this.localtoken=JSON.parse(localStorage.getItem('user')).token;\r\n            }            \r\n        let headers = new Headers({ 'authorization': 'JWT ' +this.localtoken});\r\n        let options = new RequestOptions({ headers: headers });      \r\n      return this.http.get(document.location.href,options)\r\n        .map((res:Response)=>{console.log(res);res || res.json()})\r\n         .catch((error:any)=>Observable.throw(error))\r\n    }\r\n    getprofilesforhome():Observable<Profile[]>{       \r\n      return this.http.get(location.protocol+'//'+location.hostname+(location.port ? ':'+location.port: '')+'/profilesforhome', new RequestOptions({ })).map((res:Response)=>res.json())\r\n    }\r\n}"]}