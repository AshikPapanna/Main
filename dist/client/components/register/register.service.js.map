{"version":3,"sources":["components/register/register.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,wCAAgD;AAEhD,wCAAkE;AAIlE,gCAAmC;AACnC,4CAAyC;AAEzC,iCAA+B;AAG/B,mCAAiC;AAEjC,qCAAkC;AAClC,gEAAmD;AAGnD,IAAa,eAAe,GAA5B;IACI,YAAoB,IAAS,EAAmB,QAAY,EAAS,QAAiB;QAAlE,SAAI,GAAJ,IAAI,CAAK;QAAwC,aAAQ,GAAR,QAAQ,CAAS;IAAE,CAAC;IAAA,CAAC;IAE1F,QAAQ,CAAC,IAAW;QAChB,IAAI,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,oBAAoB;QAC3D,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC,CAAC,+BAA+B;QAClG,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,yBAAyB;QACjF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,EAAC,IAAI,EAAC,OAAO,CAAC;aACzD,GAAG,CAAC,CAAC,GAAY,EAAC,EAAE,CAAA,GAAG,CAAC,IAAI,EAAE,CAAC;aAC9B,KAAK,CAAC,KAAK,CAAA,EAAE,GAAE,MAAM,CAAC,eAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA,CAAA,CAAC,CAAC,CAAA;IACrD,CAAC;IACD,gBAAgB;QACZ,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,GAAC,IAAI,GAAC,QAAQ,CAAC,QAAQ,GAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAC,QAAQ,CAAC,IAAI,CAAA,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC9F,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,GAAC,IAAI,GAAC,QAAQ,CAAC,QAAQ,GAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,GAAC,QAAQ,CAAC,IAAI,CAAA,CAAC,CAAC,GAAG,CAAC,CAAC,CAAA;IAC3G,CAAC;CACJ,CAAA;AAfY,eAAe;IAD3B,iBAAU,EAAE;IAEsB,WAAA,aAAM,CAAC,2BAAQ,CAAC,CAAA;qCAAtB,WAAI,UAAiD,iBAAQ;GAD7E,eAAe,CAe3B;AAfY,0CAAe","file":"register.service.js","sourcesContent":["import {Injectable,Inject} from '@angular/core';\r\n\r\nimport{Http,Response,Headers,RequestOptions} from '@angular/http';\r\n\r\nimport {Register} from  '../../../models/registration';\r\n\r\nimport {Observable} from 'rxjs/Rx';\r\nimport {Location} from '@angular/common';\r\n\r\nimport 'rxjs/add/operator/map';\r\n\r\n\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport 'rxjs/add/observable/throw'\r\nimport {DOCUMENT} from '@angular/platform-browser';\r\n\r\n@Injectable()\r\nexport class RegisterService{\r\n    constructor(private http:Http,@Inject(DOCUMENT) document:any,private location:Location){};\r\n    \r\n    register(body:Object):Observable<Register>{\r\n        let bodyString = JSON.stringify(body); // Stringify payload\r\n        let headers = new Headers({ 'Content-Type': 'application/json' }); // ... Set content type to JSON\r\n        let options = new RequestOptions({ headers: headers }); // Create a request optio\r\n        return this.http.post(document.location.href,body,options)\r\n        .map((res:Response)=>res.json())\r\n         .catch(error=>{ return Observable.throw(error)})\r\n    }\r\n    getafterregister(){\r\n        console.log(location.protocol+'//'+location.hostname+(location.port ? ':'+location.port: ''));\r\n        return this.http.get(location.protocol+'//'+location.hostname+(location.port ? ':'+location.port: '/'))\r\n    }\r\n}\r\n\r\n\r\n"]}