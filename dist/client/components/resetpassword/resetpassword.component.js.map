{"version":3,"sources":["components/resetpassword/resetpassword.component.ts"],"names":[],"mappings":"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","file":"resetpassword.component.js","sourcesContent":["import {Component, OnInit,NgZone,AfterViewInit} from '@angular/core'\r\nimport {ResetpasswordService} from './resetpassword.service'\r\n\r\n\r\nimport {FormBuilder,FormGroup,Validators,FormControl,AbstractControl,AsyncValidatorFn} from '@angular/forms'\r\n\r\nimport {ActivatedRoute,Router} from '@angular/router'\r\n\r\n\r\n@Component({\r\n    templateUrl: './resetpassword.component.html',\r\n    providers: [ResetpasswordService],\r\n    moduleId:module.id\r\n})\r\n\r\n\r\nexport class ResetpasswordComponent implements OnInit {\r\n    loginform:FormGroup;\r\n    token:string;\r\n    err:boolean;\r\n    constructor(private resetpasswordService:ResetpasswordService,private fb:FormBuilder,private route: ActivatedRoute,\r\n    private router:Router\r\n,private ngzone:NgZone) {\r\n        this.createform();\r\n    }\r\n    createform(){\r\n        this.loginform=this.fb.group({\r\n            password:['',[Validators.required,Validators.minLength(8),Validators.maxLength(12)]],\r\n            confirmpassword:['',[Validators.required,this.checkpasswordmatches.bind(this)]]\r\n\r\n        })\r\n    }\r\n    checkpasswordmatches(control:AbstractControl){\r\n        if(this.loginform)\r\n          return (control.value===  this.loginform.get('password').value)?null:{'donotmatch':true};\r\n        else\r\n            return null;\r\n    }\r\n     isvalidfield(field:string){  \r\n      return  this.loginform.get(field).invalid &&  this.loginform.get(field).touched;\r\n    }\r\n    \r\n    ngOnInit() {\r\n        this.route.params.subscribe(params => {\r\n       this.token = params['tokenId']; \r\n        })\r\n       console.log(this.token);\r\n       if( this.token)\r\n        {\r\n        this.resetpasswordService.getresetpassword(this.token).subscribe(\r\n            user => { },\r\n            err => {\r\n                this.err=true;      \r\n           }\r\n        )\r\n        }\r\n        else{\r\n       this.err=true;\r\n    }\r\n\r\n    if(this.err){ this.ngzone.run(()=>   this.router.navigateByUrl['/error'] )}\r\n}\r\nonSubmit(){\r\n    this.resetpasswordService.postresetpassword(this.loginform.value,this.token).subscribe(\r\n        user=>{\r\n         window.location.replace(location.protocol+'//'+location.hostname+(location.port ? ':'+location.port: ''));    \r\n        }\r\n    )\r\n}\r\n}"]}