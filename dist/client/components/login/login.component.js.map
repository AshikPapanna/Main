{"version":3,"sources":["components/login/login.component.ts"],"names":[],"mappings":"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","file":"login.component.js","sourcesContent":["import {Component,OnInit} from '@angular/core'\r\nimport {LoginService} from './login.service'\r\nimport{Router} from '@angular/router'\r\nimport {FormBuilder,FormGroup,Validators,AbstractControl} from '@angular/forms'\r\n\r\n@Component({\r\n    moduleId:module.id,\r\n    selector:'my-login',   \r\n   templateUrl:'./login.component.html',\r\n   styleUrls:['./login.component.css'],\r\n   providers:[LoginService]\r\n})\r\nexport class LoginComponent implements OnInit{\r\n    loginForm:FormGroup;\r\n    ngOnInit(): void {\r\n         if(this.loginservice.islogedin()){\r\n       window.location.replace(location.protocol+'//'+location.hostname+(location.port ? ':'+location.port: ''));\r\n             }\r\n    }\r\n    constructor(private loginservice: LoginService,\r\n    private route:Router,private fb:FormBuilder ){\r\n        this.createform();\r\n    };\r\n    createform(){\r\n        this.loginForm=this.fb.group({\r\n            email:['',[Validators.required,Validators.email]],\r\n            password:['',[Validators.required,Validators.minLength(8),Validators.maxLength(12)]]\r\n        })\r\n    } \r\n     isvalidfield(field:string){  \r\n      return  this.loginForm.get(field).invalid &&  this.loginForm.get(field).touched;\r\n    } \r\n  \r\n    onSubmit(){       \r\n        this.loginservice.login(this.loginForm.value).subscribe(\r\n            user=>\r\n            {\r\n                console.log(user);\r\n                window.location.replace(location.protocol+'//'+location.hostname+(location.port ? ':'+location.port: ''));\r\n            },\r\n            err=>{\r\n                console.log(err);\r\n                if(err._body&& JSON.parse(err._body).message&& JSON.parse(err._body).message.email ){\r\n                this.loginForm.controls['email'].setErrors({'invalid':true});  \r\n                   \r\n             }\r\n            if(err._body&& JSON.parse(err._body).message&& JSON.parse(err._body).message.password ){\r\n             \r\n                  this.loginForm.controls['password'].setErrors({'invalid':true});  \r\n                   \r\n             }\r\n            }\r\n        )\r\n    }\r\n}\r\n"]}