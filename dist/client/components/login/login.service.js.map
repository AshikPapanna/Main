{"version":3,"sources":["components/login/login.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,wCAA8C;AAC9C,wCAAkE;AAClE,gCAAmC;AAGnC,iCAA+B;AAC/B,mCAAiC;AAEjC,gEAAmD;AAGnD,IAAa,YAAY,GAAzB;IAEI,YAAoB,IAAS,EAAmB,QAAY;QAAxC,SAAI,GAAJ,IAAI,CAAK;QAC3B,IAAI,IAAI,GAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;QAClD,IAAI,CAAC,KAAK,GAAC,IAAI,IAAG,IAAI,CAAC,KAAK,CAAC;IAE/B,CAAC;IACA,KAAK,CAAC,IAAU;QACb,IAAI,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,oBAAoB;QAC3D,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC,CAAC,+BAA+B;QAClG,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,yBAAyB;QACnF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,EAAC,IAAI,EAAC,OAAO,CAAC;aAChC,GAAG,CAAC,CAAC,GAAY;YAEhB,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC,CAAC;YACtC,IAAI,KAAK,GAAE,GAAG,CAAC,IAAI,EAAE,IAAE,GAAG,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC;YACxC,IAAI,IAAI,GAAE,GAAG,CAAC,IAAI,EAAE,IAAE,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;YACvC,EAAE,CAAA,CAAC,KAAK,CAAC,CACP,CAAC;gBACC,IAAI,CAAC,KAAK,GAAC,KAAK,CAAC;gBACjB,YAAY,CAAC,OAAO,CAAC,MAAM,EAAC,IAAI,CAAC,SAAS,CAAC,EAAC,IAAI,EAAC,IAAI,EAAC,KAAK,EAAC,KAAK,EAAC,CAAC,CAAC,CAAA;gBACpE,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;gBACtD,MAAM,CAAC,GAAG,CAAC;YACb,CAAC;YACH,IAAI,CAAA,CAAC;gBACH,MAAM,CAAC,GAAG,CAAC;YACb,CAAC;QACH,CAAC,CAAC;aACzB,KAAK,CAAC,CAAC,KAAS,OAAK,MAAM,CAAC,eAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA,CAAA,CAAC,CAAC,CAAA;IAEvD,CAAC;IACF,MAAM;QACJ,IAAI,CAAC,KAAK,GAAC,IAAI,CAAC;QAChB,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IACD,SAAS;QAEP,EAAE,CAAA,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAA,CAAC;YACnC,MAAM,CAAE,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC;QACrD,CAAC;QACD,IAAI,CACF,CAAC;YACH,MAAM,CAAC,KAAK,CAAC;QACX,CAAC;IACL,CAAC;CACJ,CAAA;AA7CY,YAAY;IADxB,iBAAU,EAAE;IAGsB,WAAA,aAAM,CAAC,2BAAQ,CAAC,CAAA;qCAAtB,WAAI;GAFpB,YAAY,CA6CxB;AA7CY,oCAAY","file":"login.service.js","sourcesContent":["import{Injectable,Inject} from '@angular/core'\r\nimport {Http,RequestOptions,Headers,Response} from '@angular/http'\r\nimport {Observable} from 'rxjs/Rx';\r\nimport {Login} from '../../../models/login'\r\n\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/catch';\r\n\r\nimport {DOCUMENT} from '@angular/platform-browser';\r\n\r\n@Injectable()\r\nexport class LoginService{\r\n  public token:string;\r\n    constructor(private http:Http,@Inject(DOCUMENT) document:any){\r\n      var user=JSON.parse(localStorage.getItem('user'));\r\n      this.token=user&& user.token;\r\n\r\n    }\r\n     login(body:Login):Observable<Login>{\r\n        let bodyString = JSON.stringify(body); // Stringify payload\r\n        let headers = new Headers({ 'Content-Type': 'application/json' }); // ... Set content type to JSON\r\n        let options = new RequestOptions({ headers: headers }); // Create a request optio\r\n      return this.http.post(document.location.href,body,options)\r\n                               .map((res:Response)=>\r\n                               {\r\n                                 console.log(\"logged in successfully\");\r\n                                 let token =res.json()&&res.json().token;\r\n                                 let user =res.json()&&res.json().user;\r\n                                if(token)\r\n                                  {                                   \r\n                                    this.token=token;\r\n                                    localStorage.setItem('user',JSON.stringify({user:user,token:token}))\r\n                                    console.log(JSON.parse(localStorage.getItem('user')));\r\n                                    return res;\r\n                                  }\r\n                                else{\r\n                                  return res;\r\n                                }\r\n                              })\r\n      .catch((error:any)=>{ return Observable.throw(error)})\r\n\r\n     }\r\n    logout():void{\r\n      this.token=null;\r\n      localStorage.removeItem('user');\r\n    }\r\n    islogedin()\r\n    {\r\n      if(localStorage.getItem('user')){\r\n    return  JSON.parse(localStorage.getItem('user')).token;\r\n      }\r\n      else\r\n        {\r\n      return false;\r\n        }\r\n    }\r\n}"]}