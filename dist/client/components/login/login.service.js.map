{"version":3,"sources":["components/login/login.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,sCAAuC;AACvC,sCAAkE;AAClE,8BAAmC;AAGnC,iCAA+B;AAC/B,mCAAiC;AAIjC;IAEI,sBAAoB,IAAS;QAAT,SAAI,GAAJ,IAAI,CAAK;QAC3B,IAAI,IAAI,GAAC,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;QAClD,IAAI,CAAC,KAAK,GAAC,IAAI,IAAG,IAAI,CAAC,KAAK,CAAC;IAE/B,CAAC;IACA,4BAAK,GAAL,UAAM,IAAU;QAAhB,iBAoBC;QAnBE,IAAI,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,oBAAoB;QAC3D,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC,CAAC,+BAA+B;QAClG,IAAI,OAAO,GAAG,IAAI,qBAAc,CAAC,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,yBAAyB;QACnF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,mCAAmC,EAAC,IAAI,EAAC,OAAO,CAAC;aAC7C,GAAG,CAAC,UAAC,GAAY;YACjB,IAAI,KAAK,GAAE,GAAG,CAAC,IAAI,EAAE,IAAE,GAAG,CAAC,IAAI,EAAE,CAAC,KAAK,CAAA;YACvC,EAAE,CAAA,CAAC,KAAK,CAAC,CACP,CAAC;gBAEC,KAAI,CAAC,KAAK,GAAC,KAAK,CAAC;gBACjB,YAAY,CAAC,OAAO,CAAC,MAAM,EAAC,IAAI,CAAC,SAAS,CAAC,EAAC,IAAI,EAAC,IAAI,CAAC,OAAO,EAAC,KAAK,EAAC,KAAK,EAAC,CAAC,CAAC,CAAA;gBAC9E,MAAM,CAAC,GAAG,CAAC;YACX,CAAC;YACH,IAAI,CAAA,CAAC;gBACH,MAAM,CAAC,GAAG,CAAC;YACb,CAAC;QACH,CAAC,CAAC;aACzB,KAAK,CAAC,UAAC,KAAS,IAAG,OAAA,eAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAE,cAAc,CAAC,EAApD,CAAoD,CAAC,CAAA;IAE1E,CAAC;IACF,6BAAM,GAAN;QACE,IAAI,CAAC,KAAK,GAAC,IAAI,CAAC;QAChB,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IACD,gCAAS,GAAT;QAEE,EAAE,CAAA,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAA,CAAC;YACnC,MAAM,CAAE,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC;QACrD,CAAC;QACD,IAAI,CACF,CAAC;YACH,MAAM,CAAC,KAAK,CAAC;QACX,CAAC;IACL,CAAC;IAzCQ,YAAY;QADxB,iBAAU,EAAE;yCAGgB,WAAI;OAFpB,YAAY,CA0CxB;IAAD,mBAAC;CA1CD,AA0CC,IAAA;AA1CY,oCAAY","file":"login.service.js","sourcesContent":["import{Injectable} from '@angular/core'\r\nimport {Http,RequestOptions,Headers,Response} from '@angular/http'\r\nimport {Observable} from 'rxjs/Rx';\r\nimport {Login} from '../../../models/login'\r\n\r\nimport 'rxjs/add/operator/map';\r\nimport 'rxjs/add/operator/catch';\r\n\r\n\r\n@Injectable()\r\nexport class LoginService{\r\n  public token:string;\r\n    constructor(private http:Http){\r\n      var user=JSON.parse(localStorage.getItem('user'));\r\n      this.token=user&& user.token;\r\n\r\n    }\r\n     login(body:Login):Observable<Login>{\r\n        let bodyString = JSON.stringify(body); // Stringify payload\r\n        let headers = new Headers({ 'Content-Type': 'application/json' }); // ... Set content type to JSON\r\n        let options = new RequestOptions({ headers: headers }); // Create a request optio\r\n      return this.http.post('http://ashikp.herokuapp.com/login',body,options)\r\n                               .map((res:Response)=>\r\n                               {let token =res.json()&&res.json().token\r\n                                if(token)\r\n                                  {\r\n                                    \r\n                                    this.token=token;\r\n                                    localStorage.setItem('user',JSON.stringify({user:body.emailId,token:token}))\r\n                                  return res;\r\n                                  }\r\n                                else{\r\n                                  return res;\r\n                                }\r\n                              })\r\n      .catch((error:any)=>Observable.throw(error.json().error||'server error'))\r\n\r\n     }\r\n    logout():void{\r\n      this.token=null;\r\n      localStorage.removeItem('user');\r\n    }\r\n    islogedin()\r\n    {\r\n      if(localStorage.getItem('user')){\r\n    return  JSON.parse(localStorage.getItem('user')).token;\r\n      }\r\n      else\r\n        {\r\n      return false;\r\n        }\r\n    }\r\n}"]}